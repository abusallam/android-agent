/**\n * LiveKit Participant Management API\n * Handles participant operations like muting, removing, and updating permissions\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { RoomServiceClient } from 'livekit-server-sdk';\nimport { headers } from 'next/headers';\nimport jwt from 'jsonwebtoken';\n\n// LiveKit configuration\nconst LIVEKIT_API_KEY = process.env.LIVEKIT_API_KEY || 'devkey';\nconst LIVEKIT_API_SECRET = process.env.LIVEKIT_API_SECRET || 'secret';\nconst LIVEKIT_HOST = process.env.LIVEKIT_HOST || 'http://localhost:7880';\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-jwt-secret';\n\n// Initialize LiveKit room service client\nconst roomService = new RoomServiceClient(LIVEKIT_HOST, LIVEKIT_API_KEY, LIVEKIT_API_SECRET);\n\ninterface AuthenticatedUser {\n  id: string;\n  username: string;\n  role: string;\n}\n\ninterface ParticipantAction {\n  roomName: string;\n  participantIdentity: string;\n  action: 'mute' | 'unmute' | 'remove' | 'update_metadata' | 'update_permissions';\n  trackType?: 'audio' | 'video' | 'screen_share';\n  metadata?: string;\n  permissions?: {\n    canPublish?: boolean;\n    canSubscribe?: boolean;\n    canPublishData?: boolean;\n  };\n}\n\n/**\n * Verify JWT token and extract user information\n */\nfunction verifyAuthToken(authHeader: string | null): AuthenticatedUser | null {\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return null;\n  }\n\n  const token = authHeader.substring(7);\n  \n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    return {\n      id: decoded.id || decoded.userId,\n      username: decoded.username,\n      role: decoded.role || 'USER'\n    };\n  } catch (error) {\n    console.error('❌ JWT verification failed:', error);\n    return null;\n  }\n}\n\n/**\n * Check if user has admin privileges\n */\nfunction isAdmin(user: AuthenticatedUser): boolean {\n  return user.role === 'ROOT_ADMIN' || user.role === 'ADMIN';\n}\n\n/**\n * GET /api/livekit/participants\n * List participants in a room\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify authentication\n    const headersList = headers();\n    const authHeader = headersList.get('authorization');\n    const user = verifyAuthToken(authHeader);\n    \n    if (!user) {\n      return NextResponse.json(\n        { error: 'Unauthorized', message: 'Valid authentication token required' },\n        { status: 401 }\n      );\n    }\n\n    // Get query parameters\n    const { searchParams } = new URL(request.url);\n    const roomName = searchParams.get('room');\n    \n    if (!roomName) {\n      return NextResponse.json(\n        { error: 'Bad Request', message: 'Room name is required' },\n        { status: 400 }\n      );\n    }\n\n    // Get participants\n    const participants = await roomService.listParticipants(roomName);\n    \n    return NextResponse.json({\n      success: true,\n      data: {\n        roomName,\n        participantCount: participants.length,\n        participants: participants.map(p => {\n          const metadata = JSON.parse(p.metadata || '{}');\n          return {\n            identity: p.identity,\n            name: p.name,\n            metadata: metadata,\n            joinedAt: new Date(Number(p.joinedAt) * 1000).toISOString(),\n            isPublisher: p.permission?.canPublish || false,\n            canSubscribe: p.permission?.canSubscribe || false,\n            canPublishData: p.permission?.canPublishData || false,\n            tracks: p.tracks?.map(t => ({\n              sid: t.sid,\n              type: t.type,\n              source: t.source,\n              muted: t.muted,\n              width: t.width,\n              height: t.height,\n              frameRate: t.frameRate,\n              bitrate: t.bitrate\n            })) || [],\n            connectionQuality: 'good' // Would need to implement quality detection\n          };\n        })\n      }\n    });\n\n  } catch (error) {\n    console.error('❌ Error listing participants:', error);\n    \n    if (error instanceof Error && error.message.includes('not found')) {\n      return NextResponse.json(\n        { error: 'Not Found', message: 'Room not found' },\n        { status: 404 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Internal Server Error', message: 'Failed to list participants' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/livekit/participants\n * Perform actions on participants (mute, remove, etc.)\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify authentication\n    const headersList = headers();\n    const authHeader = headersList.get('authorization');\n    const user = verifyAuthToken(authHeader);\n    \n    if (!user) {\n      return NextResponse.json(\n        { error: 'Unauthorized', message: 'Valid authentication token required' },\n        { status: 401 }\n      );\n    }\n\n    // Parse request body\n    const body: ParticipantAction = await request.json();\n    const { \n      roomName, \n      participantIdentity, \n      action, \n      trackType, \n      metadata, \n      permissions \n    } = body;\n\n    // Validate required fields\n    if (!roomName || !participantIdentity || !action) {\n      return NextResponse.json(\n        { error: 'Bad Request', message: 'roomName, participantIdentity, and action are required' },\n        { status: 400 }\n      );\n    }\n\n    // Check if user can perform this action\n    const canPerformAction = isAdmin(user) || participantIdentity.startsWith(user.id);\n    \n    if (!canPerformAction && ['remove', 'mute', 'update_permissions'].includes(action)) {\n      return NextResponse.json(\n        { error: 'Forbidden', message: 'Insufficient privileges to perform this action' },\n        { status: 403 }\n      );\n    }\n\n    let result: any = null;\n    let message = '';\n\n    switch (action) {\n      case 'mute':\n        if (!trackType) {\n          return NextResponse.json(\n            { error: 'Bad Request', message: 'trackType is required for mute action' },\n            { status: 400 }\n          );\n        }\n        \n        if (trackType === 'audio') {\n          await roomService.mutePublishedTrack(roomName, participantIdentity, 'audio');\n          message = `Muted audio for participant ${participantIdentity}`;\n        } else if (trackType === 'video') {\n          await roomService.mutePublishedTrack(roomName, participantIdentity, 'video');\n          message = `Muted video for participant ${participantIdentity}`;\n        }\n        break;\n\n      case 'unmute':\n        if (!trackType) {\n          return NextResponse.json(\n            { error: 'Bad Request', message: 'trackType is required for unmute action' },\n            { status: 400 }\n          );\n        }\n        \n        // Note: Unmuting requires participant cooperation, server can only request\n        message = `Unmute request sent to participant ${participantIdentity} for ${trackType}`;\n        break;\n\n      case 'remove':\n        if (!isAdmin(user)) {\n          return NextResponse.json(\n            { error: 'Forbidden', message: 'Admin privileges required to remove participants' },\n            { status: 403 }\n          );\n        }\n        \n        await roomService.removeParticipant(roomName, participantIdentity);\n        message = `Removed participant ${participantIdentity} from room ${roomName}`;\n        break;\n\n      case 'update_metadata':\n        if (!metadata) {\n          return NextResponse.json(\n            { error: 'Bad Request', message: 'metadata is required for update_metadata action' },\n            { status: 400 }\n          );\n        }\n        \n        // Get current participant to preserve existing metadata\n        const participants = await roomService.listParticipants(roomName);\n        const participant = participants.find(p => p.identity === participantIdentity);\n        \n        if (!participant) {\n          return NextResponse.json(\n            { error: 'Not Found', message: 'Participant not found' },\n            { status: 404 }\n          );\n        }\n        \n        const currentMetadata = JSON.parse(participant.metadata || '{}');\n        const updatedMetadata = {\n          ...currentMetadata,\n          ...JSON.parse(metadata),\n          updatedBy: user.id,\n          updatedAt: new Date().toISOString()\n        };\n        \n        await roomService.updateParticipant(roomName, participantIdentity, {\n          metadata: JSON.stringify(updatedMetadata)\n        });\n        \n        message = `Updated metadata for participant ${participantIdentity}`;\n        result = { metadata: updatedMetadata };\n        break;\n\n      case 'update_permissions':\n        if (!isAdmin(user)) {\n          return NextResponse.json(\n            { error: 'Forbidden', message: 'Admin privileges required to update permissions' },\n            { status: 403 }\n          );\n        }\n        \n        if (!permissions) {\n          return NextResponse.json(\n            { error: 'Bad Request', message: 'permissions are required for update_permissions action' },\n            { status: 400 }\n          );\n        }\n        \n        await roomService.updateParticipant(roomName, participantIdentity, {\n          permission: {\n            canPublish: permissions.canPublish,\n            canSubscribe: permissions.canSubscribe,\n            canPublishData: permissions.canPublishData\n          }\n        });\n        \n        message = `Updated permissions for participant ${participantIdentity}`;\n        result = { permissions };\n        break;\n\n      default:\n        return NextResponse.json(\n          { error: 'Bad Request', message: `Unknown action: ${action}` },\n          { status: 400 }\n        );\n    }\n\n    console.log(`👤 ${message} by ${user.username}`);\n\n    return NextResponse.json({\n      success: true,\n      message,\n      data: result\n    });\n\n  } catch (error) {\n    console.error('❌ Error performing participant action:', error);\n    \n    if (error instanceof Error && error.message.includes('not found')) {\n      return NextResponse.json(\n        { error: 'Not Found', message: 'Room or participant not found' },\n        { status: 404 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Internal Server Error', message: 'Failed to perform participant action' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * DELETE /api/livekit/participants\n * Remove a participant from a room\n */\nexport async function DELETE(request: NextRequest) {\n  try {\n    // Verify authentication\n    const headersList = headers();\n    const authHeader = headersList.get('authorization');\n    const user = verifyAuthToken(authHeader);\n    \n    if (!user) {\n      return NextResponse.json(\n        { error: 'Unauthorized', message: 'Valid authentication token required' },\n        { status: 401 }\n      );\n    }\n\n    // Check admin privileges\n    if (!isAdmin(user)) {\n      return NextResponse.json(\n        { error: 'Forbidden', message: 'Admin privileges required to remove participants' },\n        { status: 403 }\n      );\n    }\n\n    // Get query parameters\n    const { searchParams } = new URL(request.url);\n    const roomName = searchParams.get('room');\n    const participantIdentity = searchParams.get('identity');\n    \n    if (!roomName || !participantIdentity) {\n      return NextResponse.json(\n        { error: 'Bad Request', message: 'Room name and participant identity are required' },\n        { status: 400 }\n      );\n    }\n\n    // Remove participant\n    await roomService.removeParticipant(roomName, participantIdentity);\n\n    console.log(`👤 Removed participant ${participantIdentity} from room ${roomName} by ${user.username}`);\n\n    return NextResponse.json({\n      success: true,\n      message: `Participant '${participantIdentity}' removed from room '${roomName}'`\n    });\n\n  } catch (error) {\n    console.error('❌ Error removing participant:', error);\n    \n    if (error instanceof Error && error.message.includes('not found')) {\n      return NextResponse.json(\n        { error: 'Not Found', message: 'Room or participant not found' },\n        { status: 404 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Internal Server Error', message: 'Failed to remove participant' },\n      { status: 500 }\n    );\n  }\n}"