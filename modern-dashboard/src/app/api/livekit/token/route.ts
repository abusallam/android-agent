/**\n * LiveKit Token Generation API\n * Generates access tokens for LiveKit room connections\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { AccessToken } from 'livekit-server-sdk';\nimport { headers } from 'next/headers';\nimport jwt from 'jsonwebtoken';\n\n// LiveKit configuration\nconst LIVEKIT_API_KEY = process.env.LIVEKIT_API_KEY || 'devkey';\nconst LIVEKIT_API_SECRET = process.env.LIVEKIT_API_SECRET || 'secret';\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-jwt-secret';\n\ninterface TokenRequest {\n  roomName: string;\n  participantName: string;\n  participantIdentity?: string;\n  metadata?: string;\n  permissions?: {\n    canPublish?: boolean;\n    canSubscribe?: boolean;\n    canPublishData?: boolean;\n    canUpdateMetadata?: boolean;\n    canPublishSources?: string[];\n  };\n}\n\ninterface AuthenticatedUser {\n  id: string;\n  username: string;\n  role: string;\n}\n\n/**\n * Verify JWT token and extract user information\n */\nfunction verifyAuthToken(authHeader: string | null): AuthenticatedUser | null {\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return null;\n  }\n\n  const token = authHeader.substring(7);\n  \n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    return {\n      id: decoded.id || decoded.userId,\n      username: decoded.username,\n      role: decoded.role || 'USER'\n    };\n  } catch (error) {\n    console.error('‚ùå JWT verification failed:', error);\n    return null;\n  }\n}\n\n/**\n * Generate LiveKit access token\n */\nfunction generateLiveKitToken(\n  roomName: string,\n  participantIdentity: string,\n  participantName: string,\n  metadata?: string,\n  permissions?: TokenRequest['permissions']\n): string {\n  const token = new AccessToken(LIVEKIT_API_KEY, LIVEKIT_API_SECRET, {\n    identity: participantIdentity,\n    name: participantName,\n    metadata: metadata || JSON.stringify({ joinedAt: new Date().toISOString() })\n  });\n\n  // Set room permissions\n  token.addGrant({\n    room: roomName,\n    roomJoin: true,\n    canPublish: permissions?.canPublish ?? true,\n    canSubscribe: permissions?.canSubscribe ?? true,\n    canPublishData: permissions?.canPublishData ?? true,\n    canUpdateOwnMetadata: permissions?.canUpdateMetadata ?? true,\n    canPublishSources: permissions?.canPublishSources || ['camera', 'microphone', 'screen_share']\n  });\n\n  return token.toJwt();\n}\n\n/**\n * POST /api/livekit/token\n * Generate access token for LiveKit room\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify authentication\n    const headersList = headers();\n    const authHeader = headersList.get('authorization');\n    const user = verifyAuthToken(authHeader);\n    \n    if (!user) {\n      return NextResponse.json(\n        { error: 'Unauthorized', message: 'Valid authentication token required' },\n        { status: 401 }\n      );\n    }\n\n    // Parse request body\n    const body: TokenRequest = await request.json();\n    const { \n      roomName, \n      participantName, \n      participantIdentity, \n      metadata, \n      permissions \n    } = body;\n\n    // Validate required fields\n    if (!roomName || !participantName) {\n      return NextResponse.json(\n        { \n          error: 'Bad Request', \n          message: 'roomName and participantName are required' \n        },\n        { status: 400 }\n      );\n    }\n\n    // Generate participant identity if not provided\n    const identity = participantIdentity || `${user.id}_${Date.now()}`;\n    \n    // Create metadata with user information\n    const participantMetadata = {\n      userId: user.id,\n      username: user.username,\n      role: user.role,\n      joinedAt: new Date().toISOString(),\n      ...JSON.parse(metadata || '{}')\n    };\n\n    // Set permissions based on user role\n    const roleBasedPermissions = {\n      canPublish: user.role === 'ROOT_ADMIN' || user.role === 'ADMIN' || permissions?.canPublish !== false,\n      canSubscribe: permissions?.canSubscribe !== false,\n      canPublishData: user.role === 'ROOT_ADMIN' || user.role === 'ADMIN' || permissions?.canPublishData !== false,\n      canUpdateMetadata: permissions?.canUpdateMetadata !== false,\n      canPublishSources: permissions?.canPublishSources || [\n        'camera', \n        'microphone', \n        ...(user.role === 'ROOT_ADMIN' || user.role === 'ADMIN' ? ['screen_share'] : [])\n      ]\n    };\n\n    // Generate LiveKit token\n    const liveKitToken = generateLiveKitToken(\n      roomName,\n      identity,\n      participantName,\n      JSON.stringify(participantMetadata),\n      roleBasedPermissions\n    );\n\n    console.log(`üé´ Generated LiveKit token for ${participantName} in room ${roomName}`);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        token: liveKitToken,\n        roomName,\n        participantIdentity: identity,\n        participantName,\n        permissions: roleBasedPermissions,\n        serverUrl: process.env.LIVEKIT_WS_URL || 'ws://localhost:7880',\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() // 24 hours\n      }\n    });\n\n  } catch (error) {\n    console.error('‚ùå Error generating LiveKit token:', error);\n    \n    return NextResponse.json(\n      { \n        error: 'Internal Server Error', \n        message: 'Failed to generate access token' \n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * GET /api/livekit/token\n * Get token information (for debugging)\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify authentication\n    const headersList = headers();\n    const authHeader = headersList.get('authorization');\n    const user = verifyAuthToken(authHeader);\n    \n    if (!user) {\n      return NextResponse.json(\n        { error: 'Unauthorized', message: 'Valid authentication token required' },\n        { status: 401 }\n      );\n    }\n\n    // Get query parameters\n    const { searchParams } = new URL(request.url);\n    const roomName = searchParams.get('room');\n    \n    if (!roomName) {\n      return NextResponse.json(\n        { error: 'Bad Request', message: 'room parameter is required' },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        serverUrl: process.env.LIVEKIT_WS_URL || 'ws://localhost:7880',\n        apiKey: LIVEKIT_API_KEY,\n        roomName,\n        user: {\n          id: user.id,\n          username: user.username,\n          role: user.role\n        },\n        permissions: {\n          canPublish: user.role === 'ROOT_ADMIN' || user.role === 'ADMIN',\n          canSubscribe: true,\n          canPublishData: user.role === 'ROOT_ADMIN' || user.role === 'ADMIN',\n          canUpdateMetadata: true,\n          canPublishSources: [\n            'camera', \n            'microphone', \n            ...(user.role === 'ROOT_ADMIN' || user.role === 'ADMIN' ? ['screen_share'] : [])\n          ]\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('‚ùå Error getting token info:', error);\n    \n    return NextResponse.json(\n      { error: 'Internal Server Error', message: 'Failed to get token information' },\n      { status: 500 }\n    );\n  }\n}"