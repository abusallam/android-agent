/**\n * LiveKit Room Management API\n * Handles room creation, management, and participant operations\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { RoomServiceClient, Room, Participant } from 'livekit-server-sdk';\nimport { headers } from 'next/headers';\nimport jwt from 'jsonwebtoken';\n\n// LiveKit configuration\nconst LIVEKIT_API_KEY = process.env.LIVEKIT_API_KEY || 'devkey';\nconst LIVEKIT_API_SECRET = process.env.LIVEKIT_API_SECRET || 'secret';\nconst LIVEKIT_HOST = process.env.LIVEKIT_HOST || 'http://localhost:7880';\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-jwt-secret';\n\n// Initialize LiveKit room service client\nconst roomService = new RoomServiceClient(LIVEKIT_HOST, LIVEKIT_API_KEY, LIVEKIT_API_SECRET);\n\ninterface AuthenticatedUser {\n  id: string;\n  username: string;\n  role: string;\n}\n\ninterface CreateRoomRequest {\n  name: string;\n  displayName?: string;\n  metadata?: string;\n  maxParticipants?: number;\n  emptyTimeout?: number;\n  nodeId?: string;\n}\n\ninterface UpdateRoomRequest {\n  metadata?: string;\n  maxParticipants?: number;\n}\n\n/**\n * Verify JWT token and extract user information\n */\nfunction verifyAuthToken(authHeader: string | null): AuthenticatedUser | null {\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return null;\n  }\n\n  const token = authHeader.substring(7);\n  \n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    return {\n      id: decoded.id || decoded.userId,\n      username: decoded.username,\n      role: decoded.role || 'USER'\n    };\n  } catch (error) {\n    console.error('‚ùå JWT verification failed:', error);\n    return null;\n  }\n}\n\n/**\n * Check if user has admin privileges\n */\nfunction isAdmin(user: AuthenticatedUser): boolean {\n  return user.role === 'ROOT_ADMIN' || user.role === 'ADMIN';\n}\n\n/**\n * GET /api/livekit/rooms\n * List all rooms\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify authentication\n    const headersList = headers();\n    const authHeader = headersList.get('authorization');\n    const user = verifyAuthToken(authHeader);\n    \n    if (!user) {\n      return NextResponse.json(\n        { error: 'Unauthorized', message: 'Valid authentication token required' },\n        { status: 401 }\n      );\n    }\n\n    // Get query parameters\n    const { searchParams } = new URL(request.url);\n    const roomName = searchParams.get('name');\n    \n    if (roomName) {\n      // Get specific room\n      try {\n        const room = await roomService.getRoom(roomName);\n        const participants = await roomService.listParticipants(roomName);\n        \n        return NextResponse.json({\n          success: true,\n          data: {\n            room: {\n              ...room,\n              participantCount: participants.length,\n              participants: participants.map(p => ({\n                identity: p.identity,\n                name: p.name,\n                metadata: p.metadata,\n                joinedAt: new Date(Number(p.joinedAt) * 1000).toISOString(),\n                isPublisher: p.permission?.canPublish || false,\n                tracks: p.tracks?.map(t => ({\n                  sid: t.sid,\n                  type: t.type,\n                  source: t.source,\n                  muted: t.muted\n                })) || []\n              }))\n            }\n          }\n        });\n      } catch (error) {\n        return NextResponse.json(\n          { error: 'Not Found', message: `Room '${roomName}' not found` },\n          { status: 404 }\n        );\n      }\n    } else {\n      // List all rooms\n      const rooms = await roomService.listRooms();\n      \n      return NextResponse.json({\n        success: true,\n        data: {\n          rooms: rooms.map(room => ({\n            ...room,\n            createdAt: new Date(Number(room.creationTime) * 1000).toISOString()\n          }))\n        }\n      });\n    }\n\n  } catch (error) {\n    console.error('‚ùå Error listing rooms:', error);\n    \n    return NextResponse.json(\n      { error: 'Internal Server Error', message: 'Failed to list rooms' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/livekit/rooms\n * Create a new room\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify authentication\n    const headersList = headers();\n    const authHeader = headersList.get('authorization');\n    const user = verifyAuthToken(authHeader);\n    \n    if (!user) {\n      return NextResponse.json(\n        { error: 'Unauthorized', message: 'Valid authentication token required' },\n        { status: 401 }\n      );\n    }\n\n    // Check admin privileges for room creation\n    if (!isAdmin(user)) {\n      return NextResponse.json(\n        { error: 'Forbidden', message: 'Admin privileges required to create rooms' },\n        { status: 403 }\n      );\n    }\n\n    // Parse request body\n    const body: CreateRoomRequest = await request.json();\n    const { \n      name, \n      displayName, \n      metadata, \n      maxParticipants = 50, \n      emptyTimeout = 300, // 5 minutes\n      nodeId \n    } = body;\n\n    // Validate required fields\n    if (!name) {\n      return NextResponse.json(\n        { error: 'Bad Request', message: 'Room name is required' },\n        { status: 400 }\n      );\n    }\n\n    // Create room metadata with creator information\n    const roomMetadata = {\n      createdBy: user.id,\n      createdByUsername: user.username,\n      createdAt: new Date().toISOString(),\n      displayName: displayName || name,\n      ...JSON.parse(metadata || '{}')\n    };\n\n    // Create room\n    const room = await roomService.createRoom({\n      name,\n      metadata: JSON.stringify(roomMetadata),\n      maxParticipants,\n      emptyTimeout,\n      nodeId\n    });\n\n    console.log(`üè† Created LiveKit room: ${name} by ${user.username}`);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        room: {\n          ...room,\n          createdAt: new Date(Number(room.creationTime) * 1000).toISOString(),\n          participantCount: 0,\n          participants: []\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('‚ùå Error creating room:', error);\n    \n    // Handle specific errors\n    if (error instanceof Error && error.message.includes('already exists')) {\n      return NextResponse.json(\n        { error: 'Conflict', message: 'Room with this name already exists' },\n        { status: 409 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Internal Server Error', message: 'Failed to create room' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * PATCH /api/livekit/rooms\n * Update room settings\n */\nexport async function PATCH(request: NextRequest) {\n  try {\n    // Verify authentication\n    const headersList = headers();\n    const authHeader = headersList.get('authorization');\n    const user = verifyAuthToken(authHeader);\n    \n    if (!user) {\n      return NextResponse.json(\n        { error: 'Unauthorized', message: 'Valid authentication token required' },\n        { status: 401 }\n      );\n    }\n\n    // Check admin privileges\n    if (!isAdmin(user)) {\n      return NextResponse.json(\n        { error: 'Forbidden', message: 'Admin privileges required to update rooms' },\n        { status: 403 }\n      );\n    }\n\n    // Get room name from query\n    const { searchParams } = new URL(request.url);\n    const roomName = searchParams.get('name');\n    \n    if (!roomName) {\n      return NextResponse.json(\n        { error: 'Bad Request', message: 'Room name is required' },\n        { status: 400 }\n      );\n    }\n\n    // Parse request body\n    const body: UpdateRoomRequest = await request.json();\n    const { metadata, maxParticipants } = body;\n\n    // Get current room to preserve existing metadata\n    const currentRoom = await roomService.getRoom(roomName);\n    const currentMetadata = JSON.parse(currentRoom.metadata || '{}');\n    \n    // Update metadata with new information\n    const updatedMetadata = {\n      ...currentMetadata,\n      ...JSON.parse(metadata || '{}'),\n      updatedBy: user.id,\n      updatedByUsername: user.username,\n      updatedAt: new Date().toISOString()\n    };\n\n    // Update room\n    const updatedRoom = await roomService.updateRoomMetadata(\n      roomName, \n      JSON.stringify(updatedMetadata)\n    );\n\n    console.log(`üè† Updated LiveKit room: ${roomName} by ${user.username}`);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        room: {\n          ...updatedRoom,\n          createdAt: new Date(Number(updatedRoom.creationTime) * 1000).toISOString()\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('‚ùå Error updating room:', error);\n    \n    if (error instanceof Error && error.message.includes('not found')) {\n      return NextResponse.json(\n        { error: 'Not Found', message: 'Room not found' },\n        { status: 404 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Internal Server Error', message: 'Failed to update room' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * DELETE /api/livekit/rooms\n * Delete a room\n */\nexport async function DELETE(request: NextRequest) {\n  try {\n    // Verify authentication\n    const headersList = headers();\n    const authHeader = headersList.get('authorization');\n    const user = verifyAuthToken(authHeader);\n    \n    if (!user) {\n      return NextResponse.json(\n        { error: 'Unauthorized', message: 'Valid authentication token required' },\n        { status: 401 }\n      );\n    }\n\n    // Check admin privileges\n    if (!isAdmin(user)) {\n      return NextResponse.json(\n        { error: 'Forbidden', message: 'Admin privileges required to delete rooms' },\n        { status: 403 }\n      );\n    }\n\n    // Get room name from query\n    const { searchParams } = new URL(request.url);\n    const roomName = searchParams.get('name');\n    \n    if (!roomName) {\n      return NextResponse.json(\n        { error: 'Bad Request', message: 'Room name is required' },\n        { status: 400 }\n      );\n    }\n\n    // Delete room\n    await roomService.deleteRoom(roomName);\n\n    console.log(`üóëÔ∏è Deleted LiveKit room: ${roomName} by ${user.username}`);\n\n    return NextResponse.json({\n      success: true,\n      message: `Room '${roomName}' deleted successfully`\n    });\n\n  } catch (error) {\n    console.error('‚ùå Error deleting room:', error);\n    \n    if (error instanceof Error && error.message.includes('not found')) {\n      return NextResponse.json(\n        { error: 'Not Found', message: 'Room not found' },\n        { status: 404 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Internal Server Error', message: 'Failed to delete room' },\n      { status: 500 }\n    );\n  }\n}"