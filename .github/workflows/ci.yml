name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: modern-dashboard/package-lock.json

    - name: Install dependencies
      working-directory: ./modern-dashboard
      run: npm ci

    - name: Generate Prisma client
      working-directory: ./modern-dashboard
      run: npx prisma generate
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

    - name: Run database migrations
      working-directory: ./modern-dashboard
      run: npx prisma db push
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

    - name: Run linting
      working-directory: ./modern-dashboard
      run: npm run lint

    - name: Run type checking
      working-directory: ./modern-dashboard
      run: npx tsc --noEmit

    - name: Build application
      working-directory: ./modern-dashboard
      run: npm run build
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        NEXTAUTH_SECRET: test-secret-key
        NEXTAUTH_URL: http://localhost:3000

    - name: Run tests (if available)
      working-directory: ./modern-dashboard
      run: npm test --if-present

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./modern-dashboard
        file: ./modern-dashboard/Dockerfile
        push: false
        tags: android-agent:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config
        echo "Docker Compose configuration is valid"

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'