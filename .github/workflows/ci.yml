name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: modern-dashboard/package-lock.json
    
    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
    
    - name: Add UV to PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        cd modern-dashboard
        npm ci
    
    - name: Setup database
      run: |
        cd modern-dashboard
        npm run db:sqlite
        npm run db:generate
        npm run db:push
        npm run db:init
    
    - name: Run linting
      run: |
        cd modern-dashboard
        npm run lint
    
    - name: Run type checking
      run: |
        cd modern-dashboard
        npx tsc --noEmit
    
    - name: Build application
      run: |
        cd modern-dashboard
        npm run build
    
    - name: Test API endpoints
      run: |
        cd modern-dashboard
        # Start server in background
        DATABASE_URL="file:./dev.db" npm start &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:3000/api/health || exit 1
        
        # Stop server
        kill $SERVER_PID

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: modern-dashboard/package-lock.json
    
    - name: Install dependencies
      run: |
        cd modern-dashboard
        npm ci
    
    - name: Run security audit
      run: |
        cd modern-dashboard
        npm audit --audit-level=high
    
    - name: Check for vulnerabilities
      run: |
        cd modern-dashboard
        npx audit-ci --config audit-ci.json || true

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        cd modern-dashboard
        docker build -t android-agent:test .
    
    - name: Test Docker container
      run: |
        docker run -d --name test-container -p 3000:3000 \
          -e DATABASE_URL="file:./dev.db" \
          android-agent:test
        
        # Wait for container to start
        sleep 15
        
        # Test health endpoint
        curl -f http://localhost:3000/api/health || exit 1
        
        # Stop container
        docker stop test-container
        docker rm test-container

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Ready for production deployment"
        echo "Add your deployment steps here"
        # Example: Deploy to your hosting platform
        # ./deploy.sh production